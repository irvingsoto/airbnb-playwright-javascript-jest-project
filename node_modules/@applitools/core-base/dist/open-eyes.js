"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeOpenEyes = void 0;
const extract_branching_timestamp_1 = require("./utils/extract-branching-timestamp");
const check_1 = require("./check");
const check_and_close_1 = require("./check-and-close");
const locate_text_1 = require("./locate-text");
const extract_text_1 = require("./extract-text");
const close_1 = require("./close");
const abort_1 = require("./abort");
function makeOpenEyes({ requests, logger: defaultLogger, cwd = process.cwd() }) {
    return async function openEyes({ settings, logger = defaultLogger }) {
        var _a;
        logger.log('Command "openEyes" is called with settings', settings);
        if (!settings.ignoreGitBranching) {
            if (!settings.gitBranchingTimestamp) {
                let branches = { branchName: settings.branchName, parentBranchName: settings.parentBranchName };
                try {
                    if (((_a = settings.batch) === null || _a === void 0 ? void 0 : _a.id) && !branches.branchName && !branches.parentBranchName) {
                        branches = await requests.getBatchBranches({ settings: { ...settings, batchId: settings.batch.id } });
                    }
                    if (branches.branchName && branches.parentBranchName && branches.branchName !== branches.parentBranchName) {
                        settings.gitBranchingTimestamp = await (0, extract_branching_timestamp_1.extractBranchingTimestamp)(branches, { cwd });
                        logger.log('Branching timestamp successfully extracted', settings.gitBranchingTimestamp);
                    }
                }
                catch (err) {
                    logger.error('Error during extracting merge timestamp', err);
                }
            }
        }
        else {
            settings.gitBranchingTimestamp = undefined;
        }
        const eyesRequests = await requests.openEyes({ settings, logger });
        return {
            test: eyesRequests.test,
            get running() {
                return eyesRequests.running;
            },
            get closed() {
                return eyesRequests.closed;
            },
            get aborted() {
                return eyesRequests.aborted;
            },
            check: (0, check_1.makeCheck)({ requests: eyesRequests, logger }),
            checkAndClose: (0, check_and_close_1.makeCheckAndClose)({ requests: eyesRequests, logger }),
            locateText: (0, locate_text_1.makeLocateText)({ requests: eyesRequests, logger }),
            extractText: (0, extract_text_1.makeExtractText)({ requests: eyesRequests, logger }),
            close: (0, close_1.makeClose)({ requests: eyesRequests, logger }),
            abort: (0, abort_1.makeAbort)({ requests: eyesRequests, logger }),
        };
    };
}
exports.makeOpenEyes = makeOpenEyes;
