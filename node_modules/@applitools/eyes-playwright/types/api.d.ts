import type { Driver, Element, Selector } from '@applitools/spec-driver-playwright';
import * as api from '@applitools/eyes-api';
export * from '@applitools/eyes-api';
export { Driver, Element, Selector };
export declare class Eyes extends api.Eyes<Driver, Element, Selector> {
    protected static readonly _spec: import("@applitools/core").Core<Driver, Element | Selector, (string & {
        __applitoolsBrand?: never;
    }) | (import("playwright-core").Locator & {
        __applitoolsBrand?: never;
    })>;
    static setViewportSize: (driver: Driver, viewportSize: api.RectangleSize) => Promise<void>;
}
export type ConfigurationPlain = api.ConfigurationPlain<Element, Selector>;
export declare class Configuration extends api.Configuration<Element, Selector> {
    protected static readonly _spec: import("@applitools/core").Core<Driver, Element | Selector, (string & {
        __applitoolsBrand?: never;
    }) | (import("playwright-core").Locator & {
        __applitoolsBrand?: never;
    })>;
}
export type OCRRegion = api.OCRRegion<Element, Selector>;
export type CheckSettingsPlain = api.CheckSettingsAutomationPlain<Element, Selector>;
export declare class CheckSettings extends api.CheckSettingsAutomation<Element, Selector> {
    protected static readonly _spec: import("@applitools/core").Core<Driver, Element | Selector, (string & {
        __applitoolsBrand?: never;
    }) | (import("playwright-core").Locator & {
        __applitoolsBrand?: never;
    })>;
}
export declare const Target: api.Target<Element, Selector>;
export declare class BatchClose extends api.BatchClose {
    protected static readonly _spec: import("@applitools/core").Core<Driver, Element | Selector, (string & {
        __applitoolsBrand?: never;
    }) | (import("playwright-core").Locator & {
        __applitoolsBrand?: never;
    })>;
}
export declare const closeBatch: (options: {
    batchIds: string[];
    serverUrl: string;
    apiKey: string;
    proxy?: api.ProxySettingsPlain;
}) => Promise<void>;
