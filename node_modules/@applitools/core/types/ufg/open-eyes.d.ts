import type { Eyes, Target, OpenSettings } from './types';
import type { Core as BaseCore } from '@applitools/core-base';
import { type Logger } from '@applitools/logger';
import { type SpecDriver } from '@applitools/driver';
import { type UFGClient } from '@applitools/ufg-client';
declare type Options<TDriver, TContext, TElement, TSelector> = {
    core: BaseCore;
    client?: UFGClient;
    spec?: SpecDriver<TDriver, TContext, TElement, TSelector>;
    logger?: Logger;
};
export declare function makeOpenEyes<TDriver, TContext, TElement, TSelector>({ spec, core, client, logger: defaultLogger, }: Options<TDriver, TContext, TElement, TSelector>): ({ target, settings, logger, }: {
    target?: Target<TDriver>;
    settings: OpenSettings;
    logger?: Logger;
    on?: any;
}) => Promise<Eyes<TDriver, TElement, TSelector>>;
export {};
