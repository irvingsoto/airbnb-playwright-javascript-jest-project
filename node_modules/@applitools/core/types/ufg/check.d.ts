import type { Target, TestInfo, CheckSettings, CheckResult } from './types';
import type { Eyes as BaseEyes } from '@applitools/core-base';
import { type AbortSignal } from 'abort-controller';
import { type Logger } from '@applitools/logger';
import { type UFGClient } from '@applitools/ufg-client';
import { type SpecDriver } from '@applitools/driver';
declare type Options<TDriver, TContext, TElement, TSelector> = {
    getEyes: (options: {
        rawEnvironment: any;
    }) => Promise<BaseEyes>;
    client: UFGClient;
    test: TestInfo;
    spec?: SpecDriver<TDriver, TContext, TElement, TSelector>;
    signal?: AbortSignal;
    target?: Target<TDriver>;
    logger?: Logger;
};
export declare function makeCheck<TDriver, TContext, TElement, TSelector>({ spec, getEyes, client, test, signal, target: defaultTarget, logger: defaultLogger, }: Options<TDriver, TContext, TElement, TSelector>): ({ target, settings, logger, }: {
    target?: Target<TDriver>;
    settings?: CheckSettings<TElement, TSelector>;
    logger?: Logger;
}) => Promise<(CheckResult & {
    promise: Promise<CheckResult & {
        eyes: BaseEyes;
    }>;
})[]>;
export {};
