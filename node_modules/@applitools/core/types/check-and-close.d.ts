import type { Target, Config, CheckSettings, CloseSettings, TestResult } from './types';
import type { Eyes as ClassicEyes } from './classic/types';
import type { Eyes as UFGEyes } from './ufg/types';
import { type Logger } from '@applitools/logger';
declare type Options<TDriver, TElement, TSelector> = {
    eyes: ClassicEyes<TDriver, TElement, TSelector> | UFGEyes<TDriver, TElement, TSelector>;
    logger: Logger;
};
export declare function makeCheckAndClose<TDriver, TElement, TSelector, TType extends 'classic' | 'ufg' = 'classic' | 'ufg'>({ eyes, logger: defaultLogger, }: Options<TDriver, TElement, TSelector>): ({ target, settings, config, logger, }?: {
    target?: Target<TDriver, TType>;
    settings?: CheckSettings<TElement, TSelector, TType> & CloseSettings<TType>;
    config?: Config<TElement, TSelector, TType>;
    logger?: Logger;
}) => Promise<TestResult<TType>[]>;
export {};
