import type { Target, LocateSettings, LocateResult } from './types';
import type { Core as BaseCore, Target as BaseTarget } from '@applitools/core-base';
import { type Logger } from '@applitools/logger';
import { type SpecDriver } from '@applitools/driver';
declare type Options<TDriver, TContext, TElement, TSelector> = {
    spec: SpecDriver<TDriver, TContext, TElement, TSelector>;
    core: BaseCore;
    target?: Target<TDriver>;
    logger?: Logger;
};
export declare function makeLocate<TDriver, TContext, TElement, TSelector>({ spec, core, target: defaultTarget, logger: defaultLogger, }: Options<TDriver, TContext, TElement, TSelector>): <TLocator extends string>({ target, settings, logger, }?: {
    target?: Target<TDriver> | BaseTarget;
    settings?: LocateSettings<TLocator, TElement, TSelector>;
    logger?: Logger;
}) => Promise<LocateResult<TLocator>>;
export {};
