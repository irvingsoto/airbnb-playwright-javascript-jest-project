import type { Eyes, TestResult, TestResultSummary } from './types';
import type { Core as BaseCore } from '@applitools/core-base';
import { type Logger } from '@applitools/logger';
declare type Options<TDriver, TElement, TSelector, TType extends 'classic' | 'ufg'> = {
    core: BaseCore<unknown>;
    storage: {
        eyes: Eyes<TDriver, TElement, TSelector, TType>;
        promise?: Promise<TestResult<TType>[]>;
    }[];
    logger?: Logger;
};
export declare function makeCloseManager<TDriver, TElement, TSelector, TType extends 'classic' | 'ufg' = 'classic'>({ core, storage, logger: defaultLogger, }: Options<TDriver, TElement, TSelector, TType>): ({ settings, logger, }?: {
    settings?: {
        throwErr?: boolean;
    };
    logger?: Logger;
}) => Promise<TestResultSummary<TType>>;
export {};
