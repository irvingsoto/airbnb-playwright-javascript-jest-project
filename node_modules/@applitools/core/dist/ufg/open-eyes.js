"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeOpenEyes = void 0;
const abort_controller_1 = require("abort-controller");
const driver_1 = require("@applitools/driver");
const ufg_client_1 = require("@applitools/ufg-client");
const check_1 = require("./check");
const check_and_close_1 = require("./check-and-close");
const close_1 = require("./close");
const abort_1 = require("./abort");
const utils = __importStar(require("@applitools/utils"));
function makeOpenEyes({ spec, core, client, logger: defaultLogger, }) {
    return async function openEyes({ target, settings, logger = defaultLogger, }) {
        var _a, _b, _c;
        logger.log(`Command "openEyes" is called with ${(spec === null || spec === void 0 ? void 0 : spec.isDriver(target)) ? 'default driver and' : ''} settings`, settings);
        if (spec === null || spec === void 0 ? void 0 : spec.isDriver(target)) {
            const driver = await (0, driver_1.makeDriver)({ spec, driver: target, logger, customConfig: { disableHelper: true } });
            if ((_a = settings.environment) === null || _a === void 0 ? void 0 : _a.viewportSize) {
                await driver.setViewportSize(settings.environment.viewportSize);
            }
        }
        const account = await core.getAccountInfo({ settings, logger });
        const test = {
            userTestId: settings.userTestId,
            batchId: (_b = settings.batch) === null || _b === void 0 ? void 0 : _b.id,
            keepBatchOpen: settings.keepBatchOpen,
            server: { serverUrl: settings.serverUrl, apiKey: settings.apiKey, proxy: settings.proxy },
            account,
        };
        client !== null && client !== void 0 ? client : (client = (0, ufg_client_1.makeUFGClient)({
            config: { ...account.ufg, ...account, proxy: settings.proxy },
            concurrency: (_c = settings.renderConcurrency) !== null && _c !== void 0 ? _c : 5,
            logger,
        }));
        const controller = new abort_controller_1.AbortController();
        // get eyes per environment
        const getEyes = utils.general.cachify(async ({ rawEnvironment }) => {
            const eyes = await core.openEyes({ settings: { ...settings, environment: { rawEnvironment } }, logger });
            const aborted = makeHolderPromise();
            const queue = [];
            eyes.check = utils.general.wrap(eyes.check, async (check, options) => {
                var _a, _b;
                var _c;
                const index = options.settings.index;
                (_a = queue[index]) !== null && _a !== void 0 ? _a : (queue[index] = makeHolderPromise());
                if (index > 0)
                    await Promise.race([((_b = queue[_c = index - 1]) !== null && _b !== void 0 ? _b : (queue[_c] = makeHolderPromise())), aborted]);
                return check(options).finally(queue[index].resolve);
            });
            eyes.abort = utils.general.wrap(eyes.abort, async (abort, options) => {
                aborted.reject(new Error('Command "check" was aborted due to possible error in previous step'));
                return abort(options);
            });
            return eyes;
        });
        const storage = [];
        let index = 0;
        // check with indexing and storage
        const check = utils.general.wrap((0, check_1.makeCheck)({ spec, getEyes, client, signal: controller.signal, test, target, logger }), async (check, options = {}) => {
            var _a;
            (_a = options.settings) !== null && _a !== void 0 ? _a : (options.settings = {});
            options.settings.index = index++;
            const results = await check(options);
            storage.push(...results.map(result => ({ promise: result.promise, renderer: result.renderer })));
            return results;
        });
        let closed = false;
        // close only once
        const close = utils.general.wrap((0, close_1.makeClose)({ storage, logger }), async (close, options) => {
            if (closed || aborted)
                return [];
            closed = true;
            return close(options);
        });
        let aborted = false;
        // abort only once
        const abort = utils.general.wrap((0, abort_1.makeAbort)({ storage, controller, logger }), async (abort, options) => {
            if (aborted || closed)
                return [];
            aborted = true;
            return abort(options);
        });
        return {
            test,
            get running() {
                return !closed && !aborted;
            },
            get closed() {
                return closed;
            },
            get aborted() {
                return aborted;
            },
            check,
            checkAndClose: (0, check_and_close_1.makeCheckAndClose)({ spec, getEyes, client, test, target, logger }),
            close,
            abort,
        };
    };
}
exports.makeOpenEyes = makeOpenEyes;
function makeHolderPromise() {
    let promise;
    let resolve;
    let reject;
    let result;
    return {
        then(onFulfilled, onRejected) {
            if (!promise) {
                promise = new Promise((...args) => ([resolve, reject] = args));
                if ((result === null || result === void 0 ? void 0 : result.status) === 'fulfilled')
                    resolve();
                else if ((result === null || result === void 0 ? void 0 : result.status) === 'rejected')
                    reject(result.reason);
            }
            return promise.then(onFulfilled, onRejected);
        },
        resolve() {
            if (resolve)
                resolve();
            else
                result !== null && result !== void 0 ? result : (result = { status: 'fulfilled' });
        },
        reject(reason) {
            if (reject)
                reject(reason);
            else
                result !== null && result !== void 0 ? result : (result = { status: 'rejected', reason });
        },
    };
}
