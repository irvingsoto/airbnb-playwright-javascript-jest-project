/// <reference types="node" />
/// <reference types="node" />
import { CoreCheckSettingsAutomation, CoreCheckSettingsImage } from '../Core';
import { EyesSelector } from './EyesSelector';
import { Image } from './Image';
import { AccessibilityRegionType } from '../enums/AccessibilityRegionType';
import { MatchLevel } from '../enums/MatchLevel';
import { Region, LegacyRegion } from './Region';
import { Location } from './Location';
import { LazyLoadOptions } from './LazyLoadOptions';
declare type RegionReference<TElement, TSelector> = Region | ElementReference<TElement, TSelector>;
declare type ElementReference<TElement, TSelector> = TElement | SelectorReference<TSelector>;
declare type SelectorReference<TSelector> = EyesSelector<TSelector>;
declare type FrameReference<TElement, TSelector> = ElementReference<TElement, TSelector> | string | number;
declare type ContextReference<TElement, TSelector> = {
    frame: FrameReference<TElement, TSelector>;
    scrollRootElement?: ElementReference<TElement, TSelector>;
};
declare type CodedRegion<TRegion = never> = {
    region: Region | TRegion;
    padding?: number | {
        top: number;
        bottom: number;
        let: number;
        right: number;
    };
    regionId?: string;
};
declare type CodedFloatingRegion<TRegion = never> = CodedRegion<TRegion> & {
    offset?: {
        top?: number;
        bottom?: number;
        left?: number;
        right?: number;
    };
};
/** @deprecated */
declare type LegacyCodedFloatingRegion<TRegion = never> = CodedRegion<TRegion> & {
    maxUpOffset?: number;
    maxDownOffset?: number;
    maxLeftOffset?: number;
    maxRightOffset?: number;
};
declare type CodedAccessibilityRegion<TRegion = never> = CodedRegion<TRegion> & {
    type?: AccessibilityRegionType;
};
export declare type CheckSettingsBase<TRegion = never> = {
    name?: string;
    region?: Region | TRegion;
    matchLevel?: MatchLevel;
    useDom?: boolean;
    sendDom?: boolean;
    enablePatterns?: boolean;
    ignoreDisplacements?: boolean;
    ignoreMismatch?: boolean;
    ignoreCaret?: boolean;
    ignoreRegions?: (CodedRegion<TRegion> | Region | TRegion)[];
    layoutRegions?: (CodedRegion<TRegion> | Region | TRegion)[];
    strictRegions?: (CodedRegion<TRegion> | Region | TRegion)[];
    contentRegions?: (CodedRegion<TRegion> | Region | TRegion)[];
    floatingRegions?: (CodedFloatingRegion<TRegion> | LegacyCodedFloatingRegion<TRegion> | Region | TRegion)[];
    accessibilityRegions?: (CodedAccessibilityRegion<TRegion> | Region | TRegion)[];
    pageId?: string;
    variationGroupId?: string;
};
export declare type CheckSettingsImage = CheckSettingsBase;
export declare type CheckSettingsAutomation<TElement, TSelector> = CheckSettingsBase<RegionReference<TElement, TSelector>> & {
    frames?: (ContextReference<TElement, TSelector> | FrameReference<TElement, TSelector>)[];
    webview?: boolean | string;
    scrollRootElement?: ElementReference<TElement, TSelector>;
    fully?: boolean;
    disableBrowserFetching?: boolean;
    layoutBreakpoints?: boolean | number[];
    visualGridOptions?: {
        [key: string]: any;
    };
    hooks?: {
        beforeCaptureScreenshot: string;
    };
    renderId?: string;
    timeout?: number;
    waitBeforeCapture?: number;
    lazyLoad?: boolean | LazyLoadOptions;
};
export declare class CheckSettingsBaseFluent<TRegion = never> {
    protected _settings: CheckSettingsBase<TRegion>;
    constructor(settings?: CheckSettingsBase<TRegion> | CheckSettingsBaseFluent<TRegion>);
    region(region: Region | LegacyRegion | TRegion): this;
    name(name: string): this;
    withName(name: string): this;
    ignoreRegion(region: CodedRegion<TRegion> | Region | LegacyRegion | TRegion): this;
    ignoreRegions(...regions: (CodedRegion<TRegion> | Region | LegacyRegion | TRegion)[]): this;
    /** @deprecated */
    ignore(region: Region | LegacyRegion | TRegion): this;
    /** @deprecated */
    ignores(...regions: (Region | LegacyRegion | TRegion)[]): this;
    layoutRegion(region: CodedRegion<TRegion> | Region | LegacyRegion | TRegion): this;
    layoutRegions(...regions: (CodedRegion<TRegion> | Region | LegacyRegion | TRegion)[]): this;
    strictRegion(region: CodedRegion<TRegion> | Region | LegacyRegion | TRegion): this;
    strictRegions(...regions: (CodedRegion<TRegion> | Region | LegacyRegion | TRegion)[]): this;
    contentRegion(region: CodedRegion<TRegion> | Region | LegacyRegion | TRegion): this;
    contentRegions(...regions: (CodedRegion<TRegion> | Region | LegacyRegion | TRegion)[]): this;
    floatingRegion(region: CodedFloatingRegion<TRegion>): this;
    floatingRegion(region: LegacyCodedFloatingRegion<TRegion>): this;
    floatingRegion(region: Region | LegacyRegion | TRegion, maxUpOffset?: number, maxDownOffset?: number, maxLeftOffset?: number, maxRightOffset?: number): this;
    floatingRegions(...regions: (CodedFloatingRegion<TRegion> | Region | LegacyRegion | TRegion)[]): this;
    floatingRegions(maxOffset: number, ...regions: (Region | LegacyRegion | TRegion)[]): this;
    /** @deprecated */
    floating(region: CodedFloatingRegion<TRegion>): this;
    /** @deprecated */
    floating(region: Region | LegacyRegion | TRegion): this;
    /** @deprecated */
    floatings(...regions: (CodedFloatingRegion<TRegion> | Region | LegacyRegion | TRegion)[]): this;
    /** @deprecated */
    floatings(maxOffset: number, ...regions: (Region | LegacyRegion | TRegion)[]): this;
    accessibilityRegion(region: CodedAccessibilityRegion<TRegion>): this;
    accessibilityRegion(region: Region | LegacyRegion | TRegion, type?: AccessibilityRegionType): this;
    accessibilityRegions(...regions: (CodedAccessibilityRegion<TRegion> | Region | LegacyRegion | TRegion)[]): this;
    accessibilityRegions(type: AccessibilityRegionType, ...regions: (Region | LegacyRegion | TRegion)[]): this;
    matchLevel(matchLevel: MatchLevel): this;
    layout(): this;
    exact(): this;
    strict(): this;
    ignoreColors(): this;
    /** @deprecated */
    content(): this;
    enablePatterns(enablePatterns?: boolean): this;
    ignoreDisplacements(ignoreDisplacements?: boolean): this;
    ignoreCaret(ignoreCaret?: boolean): this;
    useDom(useDom?: boolean): this;
    sendDom(sendDom?: boolean): this;
    pageId(pageId: string): this;
    variationGroupId(variationGroupId: string): this;
    /** @internal */
    toObject(): CheckSettingsBase<TRegion>;
    /** @internal */
    toString(): string;
}
export declare class CheckSettingsImageFluent extends CheckSettingsBaseFluent {
    protected _settings: CheckSettingsImage;
    protected _target: Image;
    constructor(settings?: CheckSettingsImage | CheckSettingsImageFluent, target?: Image);
    image(image: Buffer | URL | string): this;
    buffer(imageBuffer: Buffer): this;
    base64(imageBase64: Buffer): this;
    path(imagePath: string): this;
    url(imageUrl: URL | string): this;
    name(name: string): this;
    withDom(dom: string): this;
    withLocation(locationInViewport: Location): this;
    /** @internal */
    toJSON(): {
        target: Image;
        settings: CoreCheckSettingsImage;
    };
}
declare type CheckSettingsAutomationSpec<TElement = unknown, TSelector = unknown> = {
    isElement(value: any): value is TElement;
    isSelector(value: any): value is TSelector;
};
export declare class CheckSettingsAutomationFluent<TElement = unknown, TSelector = unknown> extends CheckSettingsBaseFluent<RegionReference<TElement, TSelector>> {
    protected _settings: CheckSettingsAutomation<TElement, TSelector>;
    protected static readonly _spec: CheckSettingsAutomationSpec<any, any>;
    protected _spec: CheckSettingsAutomationSpec<TElement, TSelector>;
    protected _isElementReference(value: any): value is ElementReference<TSelector, TElement>;
    protected _isSelectorReference(selector: any): selector is SelectorReference<TSelector>;
    protected _isFrameReference(value: any): value is FrameReference<TSelector, TElement>;
    constructor(settings?: CheckSettingsAutomation<TElement, TSelector> | CheckSettingsAutomationFluent<TElement, TSelector>, spec?: CheckSettingsAutomationSpec<TElement, TSelector>);
    region(region: RegionReference<TElement, TSelector>): this;
    shadow(selector: SelectorReference<TSelector>): this;
    frame(context: ContextReference<TElement, TSelector>): this;
    frame(frame: FrameReference<TElement, TSelector>, scrollRootElement?: ElementReference<TElement, TSelector>): this;
    webview(webview?: string | boolean): this;
    scrollRootElement(scrollRootElement: ElementReference<TElement, TSelector>): this;
    fully(fully?: boolean): this;
    /** @deprecated */
    stitchContent(stitchContent?: boolean): this;
    disableBrowserFetching(disableBrowserFetching: boolean): this;
    layoutBreakpoints(layoutBreakpoints?: boolean | number[]): this;
    hook(name: string, script: string): this;
    beforeRenderScreenshotHook(script: string): this;
    /** @deprecated */
    webHook(script: string): this;
    ufgOption(key: string, value: any): this;
    ufgOptions(options: {
        [key: string]: any;
    }): this;
    /** @deprecated */
    visualGridOption(key: string, value: any): this;
    /** @deprecated */
    visualGridOptions(options: {
        [key: string]: any;
    }): this;
    renderId(renderId: string): this;
    timeout(timeout: number): this;
    waitBeforeCapture(waitBeforeCapture: number): this;
    lazyLoad(options?: LazyLoadOptions | boolean): this;
    /** @internal */
    toJSON(): {
        target: undefined;
        settings: CoreCheckSettingsAutomation<TElement, TSelector>;
    };
}
export declare type TargetImage = {
    image(image: Buffer | URL | string): CheckSettingsImageFluent;
    buffer(imageBuffer: Buffer): CheckSettingsImageFluent;
    base64(imageBase64: string): CheckSettingsImageFluent;
    path(imagePath: string): CheckSettingsImageFluent;
    url(imageUrl: URL | string): CheckSettingsImageFluent;
};
export declare type TargetAutomation<TElement, TSelector> = {
    window(): CheckSettingsAutomationFluent<TElement, TSelector>;
    region(region: RegionReference<TElement, TSelector> | LegacyRegion): CheckSettingsAutomationFluent<TElement, TSelector>;
    frame(context: ContextReference<TElement, TSelector>): CheckSettingsAutomationFluent<TElement, TSelector>;
    frame(frame: FrameReference<TElement, TSelector>, scrollRootElement?: ElementReference<TElement, TSelector>): CheckSettingsAutomationFluent<TElement, TSelector>;
    shadow(selector: SelectorReference<TSelector>): CheckSettingsAutomationFluent<TSelector>;
    webview(webview?: string | boolean): CheckSettingsAutomationFluent<TElement, TSelector>;
};
export declare type Target<TElement, TSelector> = TargetImage & TargetAutomation<TElement, TSelector>;
export declare const Target: Target<unknown, unknown> & {
    spec?: CheckSettingsAutomationSpec;
};
export {};
